// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package pgrepo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, email, phone, role, google_id)
VALUES ($1, $2, $3, $4, $5)
`

type CreateUserParams struct {
	ID       uuid.UUID   `json:"id"`
	Email    string      `json:"email"`
	Phone    string      `json:"phone"`
	Role     int16       `json:"role"`
	GoogleID pgtype.Text `json:"googleId"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Phone,
		arg.Role,
		arg.GoogleID,
	)
	return err
}

const findByEmail = `-- name: FindByEmail :one
SELECT id, email, phone, role, google_id
FROM users
WHERE email = $1
`

type FindByEmailRow struct {
	ID       uuid.UUID   `json:"id"`
	Email    string      `json:"email"`
	Phone    string      `json:"phone"`
	Role     int16       `json:"role"`
	GoogleID pgtype.Text `json:"googleId"`
}

func (q *Queries) FindByEmail(ctx context.Context, email string) (FindByEmailRow, error) {
	row := q.db.QueryRow(ctx, findByEmail, email)
	var i FindByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.GoogleID,
	)
	return i, err
}

const findByPhone = `-- name: FindByPhone :one
SELECT id, email, phone, role, google_id
FROM users
WHERE phone = $1
`

type FindByPhoneRow struct {
	ID       uuid.UUID   `json:"id"`
	Email    string      `json:"email"`
	Phone    string      `json:"phone"`
	Role     int16       `json:"role"`
	GoogleID pgtype.Text `json:"googleId"`
}

func (q *Queries) FindByPhone(ctx context.Context, phone string) (FindByPhoneRow, error) {
	row := q.db.QueryRow(ctx, findByPhone, phone)
	var i FindByPhoneRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.GoogleID,
	)
	return i, err
}
