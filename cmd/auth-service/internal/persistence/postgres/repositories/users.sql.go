// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package pgrepo

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, email, phone, role, password)
VALUES ($1, $2, $3, $4, $5)
`

type CreateUserParams struct {
	ID       uuid.UUID `json:"id"`
	Email    string    `json:"email"`
	Phone    string    `json:"phone"`
	Role     int16     `json:"role"`
	Password string    `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Phone,
		arg.Role,
		arg.Password,
	)
	return err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, phone, role, password
FROM users
WHERE email = $1
`

type FindUserByEmailRow struct {
	ID       uuid.UUID `json:"id"`
	Email    string    `json:"email"`
	Phone    string    `json:"phone"`
	Role     int16     `json:"role"`
	Password string    `json:"password"`
}

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (FindUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i FindUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.Password,
	)
	return i, err
}

const findUserByPhone = `-- name: FindUserByPhone :one
SELECT id, email, phone, role, password
FROM users
WHERE phone = $1
`

type FindUserByPhoneRow struct {
	ID       uuid.UUID `json:"id"`
	Email    string    `json:"email"`
	Phone    string    `json:"phone"`
	Role     int16     `json:"role"`
	Password string    `json:"password"`
}

func (q *Queries) FindUserByPhone(ctx context.Context, phone string) (FindUserByPhoneRow, error) {
	row := q.db.QueryRow(ctx, findUserByPhone, phone)
	var i FindUserByPhoneRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.Password,
	)
	return i, err
}
