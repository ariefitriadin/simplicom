// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: warehouse.proto

package warehouseService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WarehouseService_CreateWarehouse_FullMethodName    = "/warehouseService.WarehouseService/CreateWarehouse"
	WarehouseService_GetWarehouse_FullMethodName       = "/warehouseService.WarehouseService/GetWarehouse"
	WarehouseService_ListWarehouses_FullMethodName     = "/warehouseService.WarehouseService/ListWarehouses"
	WarehouseService_UpdateWarehouse_FullMethodName    = "/warehouseService.WarehouseService/UpdateWarehouse"
	WarehouseService_DeleteWarehouse_FullMethodName    = "/warehouseService.WarehouseService/DeleteWarehouse"
	WarehouseService_AddStock_FullMethodName           = "/warehouseService.WarehouseService/AddStock"
	WarehouseService_GetStock_FullMethodName           = "/warehouseService.WarehouseService/GetStock"
	WarehouseService_ReserveStock_FullMethodName       = "/warehouseService.WarehouseService/ReserveStock"
	WarehouseService_ConfirmReservation_FullMethodName = "/warehouseService.WarehouseService/ConfirmReservation"
	WarehouseService_CancelReservation_FullMethodName  = "/warehouseService.WarehouseService/CancelReservation"
	WarehouseService_GetStockHistory_FullMethodName    = "/warehouseService.WarehouseService/GetStockHistory"
)

// WarehouseServiceClient is the client API for WarehouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarehouseServiceClient interface {
	CreateWarehouse(ctx context.Context, in *CreateWarehouseRequest, opts ...grpc.CallOption) (*Warehouse, error)
	GetWarehouse(ctx context.Context, in *GetWarehouseRequest, opts ...grpc.CallOption) (*Warehouse, error)
	ListWarehouses(ctx context.Context, in *ListWarehousesRequest, opts ...grpc.CallOption) (*ListWarehousesResponse, error)
	UpdateWarehouse(ctx context.Context, in *UpdateWarehouseRequest, opts ...grpc.CallOption) (*Warehouse, error)
	DeleteWarehouse(ctx context.Context, in *DeleteWarehouseRequest, opts ...grpc.CallOption) (*DeleteWarehouseResponse, error)
	AddStock(ctx context.Context, in *AddStockRequest, opts ...grpc.CallOption) (*StockResponse, error)
	GetStock(ctx context.Context, in *GetStockRequest, opts ...grpc.CallOption) (*StockResponse, error)
	ReserveStock(ctx context.Context, in *ReserveStockRequest, opts ...grpc.CallOption) (*ReservationResponse, error)
	ConfirmReservation(ctx context.Context, in *ConfirmReservationRequest, opts ...grpc.CallOption) (*ConfirmationResponse, error)
	CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*CancellationResponse, error)
	GetStockHistory(ctx context.Context, in *GetStockHistoryRequest, opts ...grpc.CallOption) (*StockHistoryResponse, error)
}

type warehouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWarehouseServiceClient(cc grpc.ClientConnInterface) WarehouseServiceClient {
	return &warehouseServiceClient{cc}
}

func (c *warehouseServiceClient) CreateWarehouse(ctx context.Context, in *CreateWarehouseRequest, opts ...grpc.CallOption) (*Warehouse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Warehouse)
	err := c.cc.Invoke(ctx, WarehouseService_CreateWarehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetWarehouse(ctx context.Context, in *GetWarehouseRequest, opts ...grpc.CallOption) (*Warehouse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Warehouse)
	err := c.cc.Invoke(ctx, WarehouseService_GetWarehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) ListWarehouses(ctx context.Context, in *ListWarehousesRequest, opts ...grpc.CallOption) (*ListWarehousesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWarehousesResponse)
	err := c.cc.Invoke(ctx, WarehouseService_ListWarehouses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) UpdateWarehouse(ctx context.Context, in *UpdateWarehouseRequest, opts ...grpc.CallOption) (*Warehouse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Warehouse)
	err := c.cc.Invoke(ctx, WarehouseService_UpdateWarehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) DeleteWarehouse(ctx context.Context, in *DeleteWarehouseRequest, opts ...grpc.CallOption) (*DeleteWarehouseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWarehouseResponse)
	err := c.cc.Invoke(ctx, WarehouseService_DeleteWarehouse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) AddStock(ctx context.Context, in *AddStockRequest, opts ...grpc.CallOption) (*StockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, WarehouseService_AddStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetStock(ctx context.Context, in *GetStockRequest, opts ...grpc.CallOption) (*StockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, WarehouseService_GetStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) ReserveStock(ctx context.Context, in *ReserveStockRequest, opts ...grpc.CallOption) (*ReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReservationResponse)
	err := c.cc.Invoke(ctx, WarehouseService_ReserveStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) ConfirmReservation(ctx context.Context, in *ConfirmReservationRequest, opts ...grpc.CallOption) (*ConfirmationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmationResponse)
	err := c.cc.Invoke(ctx, WarehouseService_ConfirmReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*CancellationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancellationResponse)
	err := c.cc.Invoke(ctx, WarehouseService_CancelReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetStockHistory(ctx context.Context, in *GetStockHistoryRequest, opts ...grpc.CallOption) (*StockHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockHistoryResponse)
	err := c.cc.Invoke(ctx, WarehouseService_GetStockHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarehouseServiceServer is the server API for WarehouseService service.
// All implementations must embed UnimplementedWarehouseServiceServer
// for forward compatibility
type WarehouseServiceServer interface {
	CreateWarehouse(context.Context, *CreateWarehouseRequest) (*Warehouse, error)
	GetWarehouse(context.Context, *GetWarehouseRequest) (*Warehouse, error)
	ListWarehouses(context.Context, *ListWarehousesRequest) (*ListWarehousesResponse, error)
	UpdateWarehouse(context.Context, *UpdateWarehouseRequest) (*Warehouse, error)
	DeleteWarehouse(context.Context, *DeleteWarehouseRequest) (*DeleteWarehouseResponse, error)
	AddStock(context.Context, *AddStockRequest) (*StockResponse, error)
	GetStock(context.Context, *GetStockRequest) (*StockResponse, error)
	ReserveStock(context.Context, *ReserveStockRequest) (*ReservationResponse, error)
	ConfirmReservation(context.Context, *ConfirmReservationRequest) (*ConfirmationResponse, error)
	CancelReservation(context.Context, *CancelReservationRequest) (*CancellationResponse, error)
	GetStockHistory(context.Context, *GetStockHistoryRequest) (*StockHistoryResponse, error)
	mustEmbedUnimplementedWarehouseServiceServer()
}

// UnimplementedWarehouseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWarehouseServiceServer struct {
}

func (UnimplementedWarehouseServiceServer) CreateWarehouse(context.Context, *CreateWarehouseRequest) (*Warehouse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWarehouse not implemented")
}
func (UnimplementedWarehouseServiceServer) GetWarehouse(context.Context, *GetWarehouseRequest) (*Warehouse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarehouse not implemented")
}
func (UnimplementedWarehouseServiceServer) ListWarehouses(context.Context, *ListWarehousesRequest) (*ListWarehousesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWarehouses not implemented")
}
func (UnimplementedWarehouseServiceServer) UpdateWarehouse(context.Context, *UpdateWarehouseRequest) (*Warehouse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWarehouse not implemented")
}
func (UnimplementedWarehouseServiceServer) DeleteWarehouse(context.Context, *DeleteWarehouseRequest) (*DeleteWarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWarehouse not implemented")
}
func (UnimplementedWarehouseServiceServer) AddStock(context.Context, *AddStockRequest) (*StockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStock not implemented")
}
func (UnimplementedWarehouseServiceServer) GetStock(context.Context, *GetStockRequest) (*StockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStock not implemented")
}
func (UnimplementedWarehouseServiceServer) ReserveStock(context.Context, *ReserveStockRequest) (*ReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveStock not implemented")
}
func (UnimplementedWarehouseServiceServer) ConfirmReservation(context.Context, *ConfirmReservationRequest) (*ConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmReservation not implemented")
}
func (UnimplementedWarehouseServiceServer) CancelReservation(context.Context, *CancelReservationRequest) (*CancellationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReservation not implemented")
}
func (UnimplementedWarehouseServiceServer) GetStockHistory(context.Context, *GetStockHistoryRequest) (*StockHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockHistory not implemented")
}
func (UnimplementedWarehouseServiceServer) mustEmbedUnimplementedWarehouseServiceServer() {}

// UnsafeWarehouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarehouseServiceServer will
// result in compilation errors.
type UnsafeWarehouseServiceServer interface {
	mustEmbedUnimplementedWarehouseServiceServer()
}

func RegisterWarehouseServiceServer(s grpc.ServiceRegistrar, srv WarehouseServiceServer) {
	s.RegisterService(&WarehouseService_ServiceDesc, srv)
}

func _WarehouseService_CreateWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).CreateWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_CreateWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).CreateWarehouse(ctx, req.(*CreateWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_GetWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetWarehouse(ctx, req.(*GetWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_ListWarehouses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWarehousesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).ListWarehouses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_ListWarehouses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).ListWarehouses(ctx, req.(*ListWarehousesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_UpdateWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).UpdateWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_UpdateWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).UpdateWarehouse(ctx, req.(*UpdateWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_DeleteWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).DeleteWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_DeleteWarehouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).DeleteWarehouse(ctx, req.(*DeleteWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_AddStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).AddStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_AddStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).AddStock(ctx, req.(*AddStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_GetStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetStock(ctx, req.(*GetStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_ReserveStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).ReserveStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_ReserveStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).ReserveStock(ctx, req.(*ReserveStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_ConfirmReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).ConfirmReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_ConfirmReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).ConfirmReservation(ctx, req.(*ConfirmReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_CancelReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).CancelReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_CancelReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).CancelReservation(ctx, req.(*CancelReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetStockHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetStockHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_GetStockHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetStockHistory(ctx, req.(*GetStockHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WarehouseService_ServiceDesc is the grpc.ServiceDesc for WarehouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarehouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "warehouseService.WarehouseService",
	HandlerType: (*WarehouseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWarehouse",
			Handler:    _WarehouseService_CreateWarehouse_Handler,
		},
		{
			MethodName: "GetWarehouse",
			Handler:    _WarehouseService_GetWarehouse_Handler,
		},
		{
			MethodName: "ListWarehouses",
			Handler:    _WarehouseService_ListWarehouses_Handler,
		},
		{
			MethodName: "UpdateWarehouse",
			Handler:    _WarehouseService_UpdateWarehouse_Handler,
		},
		{
			MethodName: "DeleteWarehouse",
			Handler:    _WarehouseService_DeleteWarehouse_Handler,
		},
		{
			MethodName: "AddStock",
			Handler:    _WarehouseService_AddStock_Handler,
		},
		{
			MethodName: "GetStock",
			Handler:    _WarehouseService_GetStock_Handler,
		},
		{
			MethodName: "ReserveStock",
			Handler:    _WarehouseService_ReserveStock_Handler,
		},
		{
			MethodName: "ConfirmReservation",
			Handler:    _WarehouseService_ConfirmReservation_Handler,
		},
		{
			MethodName: "CancelReservation",
			Handler:    _WarehouseService_CancelReservation_Handler,
		},
		{
			MethodName: "GetStockHistory",
			Handler:    _WarehouseService_GetStockHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warehouse.proto",
}
