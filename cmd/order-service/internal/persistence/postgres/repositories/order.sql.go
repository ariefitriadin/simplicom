// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: order.sql

package pgrepo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getOrder = `-- name: GetOrder :one
SELECT createdat, updatedat, deletedat, id, customer_id, order_date, status, total FROM orders WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
		&i.ID,
		&i.CustomerID,
		&i.OrderDate,
		&i.Status,
		&i.Total,
	)
	return i, err
}

const getOrders = `-- name: GetOrders :many
SELECT 
    o.id AS order_id,
    o.customer_id,
    o.order_date,
    o.status,
    o.total,
    oi.id AS order_item_id,
    oi.product_id,
    oi.quantity,
    oi.price
FROM orders o
JOIN order_items oi ON o.id = oi.order_id
WHERE o.id = $1
`

type GetOrdersRow struct {
	OrderID     uuid.UUID        `json:"orderId"`
	CustomerID  uuid.UUID        `json:"customerId"`
	OrderDate   pgtype.Timestamp `json:"orderDate"`
	Status      string           `json:"status"`
	Total       pgtype.Numeric   `json:"total"`
	OrderItemID int32            `json:"orderItemId"`
	ProductID   int32            `json:"productId"`
	Quantity    int32            `json:"quantity"`
	Price       pgtype.Numeric   `json:"price"`
}

func (q *Queries) GetOrders(ctx context.Context, id uuid.UUID) ([]GetOrdersRow, error) {
	rows, err := q.db.Query(ctx, getOrders, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrdersRow{}
	for rows.Next() {
		var i GetOrdersRow
		if err := rows.Scan(
			&i.OrderID,
			&i.CustomerID,
			&i.OrderDate,
			&i.Status,
			&i.Total,
			&i.OrderItemID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOrder = `-- name: InsertOrder :one
INSERT INTO orders (id, customer_id, order_date, status, total)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, customer_id, order_date, status, total
`

type InsertOrderParams struct {
	ID         uuid.UUID        `json:"id"`
	CustomerID uuid.UUID        `json:"customerId"`
	OrderDate  pgtype.Timestamp `json:"orderDate"`
	Status     string           `json:"status"`
	Total      pgtype.Numeric   `json:"total"`
}

type InsertOrderRow struct {
	ID         uuid.UUID        `json:"id"`
	CustomerID uuid.UUID        `json:"customerId"`
	OrderDate  pgtype.Timestamp `json:"orderDate"`
	Status     string           `json:"status"`
	Total      pgtype.Numeric   `json:"total"`
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) (InsertOrderRow, error) {
	row := q.db.QueryRow(ctx, insertOrder,
		arg.ID,
		arg.CustomerID,
		arg.OrderDate,
		arg.Status,
		arg.Total,
	)
	var i InsertOrderRow
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.OrderDate,
		&i.Status,
		&i.Total,
	)
	return i, err
}

const insertOrderItem = `-- name: InsertOrderItem :exec
INSERT INTO order_items (order_id, product_id, product_name, quantity, price)
SELECT 
    unnest($1::uuid[]), 
    unnest($2::int[]), 
    unnest($3::text[]),
    unnest($4::int[]), 
    unnest($5::numeric[])
`

type InsertOrderItemParams struct {
	Column1 []uuid.UUID      `json:"column1"`
	Column2 []int32          `json:"column2"`
	Column3 []string         `json:"column3"`
	Column4 []int32          `json:"column4"`
	Column5 []pgtype.Numeric `json:"column5"`
}

func (q *Queries) InsertOrderItem(ctx context.Context, arg InsertOrderItemParams) error {
	_, err := q.db.Exec(ctx, insertOrderItem,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
	)
	return err
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET status = $2, total = $3
WHERE id = $1
RETURNING id, customer_id, order_date, status, total
`

type UpdateOrderParams struct {
	ID     uuid.UUID      `json:"id"`
	Status string         `json:"status"`
	Total  pgtype.Numeric `json:"total"`
}

type UpdateOrderRow struct {
	ID         uuid.UUID        `json:"id"`
	CustomerID uuid.UUID        `json:"customerId"`
	OrderDate  pgtype.Timestamp `json:"orderDate"`
	Status     string           `json:"status"`
	Total      pgtype.Numeric   `json:"total"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (UpdateOrderRow, error) {
	row := q.db.QueryRow(ctx, updateOrder, arg.ID, arg.Status, arg.Total)
	var i UpdateOrderRow
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.OrderDate,
		&i.Status,
		&i.Total,
	)
	return i, err
}

const updateOrderItems = `-- name: UpdateOrderItems :exec
WITH updates AS (
    SELECT 
        unnest($1::uuid[]) AS id,
        unnest($2::uuid[]) AS order_id,
        unnest($3::int[]) AS product_id,
        unnest($4::text[]) AS product_name,
        unnest($5::int[]) AS quantity,
        unnest($6::numeric[]) AS price
)
UPDATE order_items oi
SET 
    product_id = u.product_id,
    product_name = u.product_name,
    quantity = u.quantity,
    price = u.price
FROM updates u
WHERE oi.id = u.id AND oi.order_id = u.order_id
`

type UpdateOrderItemsParams struct {
	Column1 []uuid.UUID      `json:"column1"`
	Column2 []uuid.UUID      `json:"column2"`
	Column3 []int32          `json:"column3"`
	Column4 []string         `json:"column4"`
	Column5 []int32          `json:"column5"`
	Column6 []pgtype.Numeric `json:"column6"`
}

func (q *Queries) UpdateOrderItems(ctx context.Context, arg UpdateOrderItemsParams) error {
	_, err := q.db.Exec(ctx, updateOrderItems,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
	)
	return err
}
